let f(n)(m)(x) returns (cpt)
  forward(n) (xi in x) returns (cpt init 0) do
    forward(m) (xij in xi) returns (cpt init last cpt) do
      cpt = last cpt + xij
    done
  done

let g(n)(m)(x) returns (cpt)
  forward(n) (xi in x) returns (cpt) do
    forward resume (m) (xij in xi) returns (cpt init 0) do
      cpt = last cpt + xij
    done
  done

let main1() returns o
  let v = [|[|1;2;3|];[|4;5;6|]|] in
  do o = f(2)(3)(v) done

let main2() returns (o1, o2)
  let v = [|[|1;2;3|];[|4;5;6|]|] in
  do o1 = f(2)(3)(v) and o2 = g(2)(3)(v) (* and assert (o1 = o2) *) done

